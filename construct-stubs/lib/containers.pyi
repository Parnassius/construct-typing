from typing import AnyStr, NoReturn, Union, Any, TypeVar, List, Tuple, Dict, Iterator, Generic
import re

ContainerType = TypeVar("ContainerType")
ListType = TypeVar("ListType")

SearchPattern = Union[AnyStr, re.Pattern[AnyStr]]

class Container(Generic[ContainerType], dict[str, ContainerType]):
    def __getattr__(self, name: str) -> ContainerType: ...
    def __call__(self, **entrieskw: Any) -> Container[ContainerType]: ...
    def keys(self) -> Iterator[str]: ...
    def values(self) -> List[ContainerType]: ...
    def items(self) -> List[Tuple[str, ContainerType]]: ...
    def clear(self) -> None: ...
    def pop(self, key: str) -> ContainerType: ...
    def popitem(self) -> Tuple[str, ContainerType]: ...
    def update(self, seqordict: Union[dict[str, ContainerType], Tuple[str, ContainerType]]) -> None: ...
    def search(self, pattern: SearchPattern[Any]) -> Any: ...
    def search_all(self, pattern: SearchPattern[Any]) -> Any: ...

class ListContainer(List[ListType]):
    def search(self, pattern: SearchPattern[Any]) -> Any: ...
    def search_all(self, pattern: SearchPattern[Any]) -> Any: ...
